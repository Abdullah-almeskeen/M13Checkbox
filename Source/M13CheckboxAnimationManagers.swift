//
//  M13CheckboxAnimationManager.swift
//  M13Checkbox
//
//  Created by McQuilkin, Brandon on 2/26/16.
//  Copyright Â© 2016 Brandon McQuilkin. All rights reserved.
//

import UIKit

// Generates the animations needed by `M13Checkbox`.
internal class M13CheckboxAnimationManager {
    
    //----------------------------
    // MARK: - Properties
    //----------------------------
    
    // The duration of animations that are generated by the animation manager.
    var animationDuration: NSTimeInterval = 0.3
    
    // The frame rate for certian keyframe animations.
    private var frameRate: CGFloat = 60.0
    
    //----------------------------
    // MARK: - Quick Animations
    //----------------------------
    
    /**
    Creates an animation that either quickly fades a layer in or out.
    - note: Mainly used to smooth out the start and end of various animations.
    - parameter reverse: The direction of the animation.
    - returns: A `CABasicAnimation` that animates the opacity property.
    */
    func quickOpacityAnimation(reverse: Bool) -> CABasicAnimation {
        let animation = CABasicAnimation(keyPath: "opacity")
        // Set the start and end.
        if !reverse {
            animation.fromValue = 0.0
            animation.toValue = 1.0
            animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
        } else {
            animation.fromValue = 1.0
            animation.toValue = 0.0
            animation.beginTime = CACurrentMediaTime() + (animationDuration * 0.9)
            animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
        }
        // Set animation properties.
        animation.duration = animationDuration / 10.0
        animation.removedOnCompletion = false
        animation.fillMode = kCAFillModeForwards
        
        return animation
    }
    
    /**
     Creates an animation that either quickly changes the line width of a layer from 0% to 100%.
     - note: Mainly used to smooth out the start and end of various animations.
     - parameter reverse: The direction of the animation.
     - returns: A `CABasicAnimation` that animates the opacity property.
     */
    func quickLineWidthAnimation(width: CGFloat, reverse: Bool) -> CABasicAnimation {
        let animation = CABasicAnimation(keyPath: "lineWidth")
        // Set the start and end.
        if !reverse {
            animation.fromValue = 0.0
            animation.toValue = width
            animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
        } else {
            animation.fromValue = width
            animation.toValue = 0.0
            animation.beginTime = CACurrentMediaTime() + (animationDuration * 0.9)
            animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
        }
        // Set animation properties.
        animation.duration = animationDuration / 10.0
        animation.removedOnCompletion = false
        animation.fillMode = kCAFillModeForwards
        
        return animation
    }
    
    //----------------------------
    // MARK: - Animation Component Generation
    //----------------------------
    
    /**
     Creates an animation that animates the stroke property.
     - parameter reverse: The direction of the animation.
     - returns: A `CABasicAnimation` that animates the stroke property.
     */
    func strokeAnimation(reverse: Bool) -> CABasicAnimation {
        let animation = CABasicAnimation(keyPath: "strokeEnd")
        // Set the start and end.
        if !reverse {
            animation.fromValue = 0.0
            animation.toValue = 1.0
        } else {
            animation.fromValue = 1.0
            animation.toValue = 0.0
        }
        // Set animation properties.
        animation.duration = animationDuration
        animation.removedOnCompletion = false
        animation.fillMode = kCAFillModeForwards
        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
        
        return animation
    }
    
    /**
     Creates an animation that animates the opacity property.
     - parameter reverse: The direction of the animation.
     - returns: A `CABasicAnimation` that animates the opacity property.
     */
    func opacityAnimation(reverse: Bool) -> CABasicAnimation {
        let animation = CABasicAnimation(keyPath: "opacity")
        // Set the start and end.
        if !reverse {
            animation.fromValue = 0.0
            animation.toValue = 1.0
        } else {
            animation.fromValue = 1.0
            animation.toValue = 0.0
        }
        // Set animation properties.
        animation.duration = animationDuration
        animation.removedOnCompletion = false
        animation.fillMode = kCAFillModeForwards
        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
        
        return animation
    }
    
    /**
     Creates an animation that animates between two `UIBezierPath`s.
     - parameter fromPath: The start path.
     - parameter toPath: The end path.
     - returns: A `CABasicAnimation` that animates a path between the `fromPath` and `toPath`.
     */
    func morphAnimation(fromPath: UIBezierPath, toPath: UIBezierPath) -> CABasicAnimation {
        let animation = CABasicAnimation(keyPath: "path")
        // Set the start and end.
        animation.fromValue = fromPath.CGPath
        animation.toValue = toPath.CGPath
        // Set animation properties.
        animation.duration = animationDuration
        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
        animation.fillMode = kCAFillModeForwards
        animation.removedOnCompletion = false
        
        return animation
    }
    
    /**
     Creates an animation that animates between a filled an unfilled box.
     - parameter numberOfBounces: The number of bounces in the animation.
     - parameter amplitude: The distance of the bounce.
     - parameter reverse: The direction of the animation.
     - returns: A `CAKeyframeAnimation` that animates a change in fill.
     */
    func fillAnimation(numberOfBounces: Int, amplitude: CGFloat, reverse: Bool) -> CAKeyframeAnimation {
        var values = [CATransform3D]()
        var keyTimes = [Float]()
        
        // Add the start scale
        if !reverse {
            values.append(CATransform3DMakeScale(0.0, 0.0, 0.0))
        } else {
            values.append(CATransform3DMakeScale(1.0, 1.0, 1.0))
        }
        keyTimes.append(0.0)
        
        // Add the bounces.
        if numberOfBounces > 0 {
            for i in 1...numberOfBounces {
                let scale = i % 2 == 1 ? (1.0 + (amplitude / CGFloat(i))) : (1.0 - (amplitude / CGFloat(i)))
                let time = (Float(i) * 1.0) / Float(numberOfBounces + 1)
                
                values.append(CATransform3DMakeScale(scale, scale, scale))
                keyTimes.append(time)
            }
        }
        
        // Add the end scale.
        if !reverse {
            values.append(CATransform3DMakeScale(1.0, 1.0, 1.0))
        } else {
            values.append(CATransform3DMakeScale(0.0001, 0.0001, 0.0001))
        }
        keyTimes.append(1.0)
        
        // Create the animation.
        let animation = CAKeyframeAnimation(keyPath: "transform")
        animation.values = values.map({ NSValue(CATransform3D: $0) })
        animation.keyTimes = keyTimes.map({ NSNumber(float: $0) })
        animation.removedOnCompletion = false
        animation.fillMode = kCAFillModeForwards
        animation.duration = animationDuration
        animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
        
        return animation
    }
}
